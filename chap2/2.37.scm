(load "accumulate.scm")
(load "2.36.scm")

(define m (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
(define (dot-product v w)
  (accumulate + 0 (map * v w))
)
; (display (dot-product (list 1 2 3 4) (list 1 1 1 1)))
(define (matrix-*-vector m v)
  (map (lambda (t) (dot-product t v)) m)
)

; (display (matrix-*-vector m (list 1 2 3 4)))
(define (transpose m)
  (accumulate-n cons '() m)
  )
; (display (transpose m))
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
        (map (lambda (v) (matrix-*-vector cols v)) m)
  )
)
; (display (matrix-*-matrix m (list (list 1 4) (list 2 5) (list 3 6) (list 4 7))))